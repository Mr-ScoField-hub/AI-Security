name: Security Vulnerability Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

jobs:
  python-security:
    name: Python Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd guardrail_sentinel_backend
          python -m pip install --upgrade pip
          pip install safety bandit pip-audit
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Run Safety check (Known vulnerabilities)
        run: |
          cd guardrail_sentinel_backend
          safety check --json || true
        continue-on-error: true

      - name: Run pip-audit (CVE scanning)
        run: |
          cd guardrail_sentinel_backend
          pip-audit --desc --format json || true
        continue-on-error: true

      - name: Run Bandit (Security linter)
        run: |
          cd guardrail_sentinel_backend
          bandit -r . -f json -o bandit-report.json || true
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: bandit-security-report
          path: guardrail_sentinel_backend/bandit-report.json

  npm-security:
    name: NPM Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci || npm install

      - name: Run npm audit
        run: |
          cd frontend
          npm audit --json > npm-audit-report.json || true
        continue-on-error: true

      - name: Check for high/critical vulnerabilities
        run: |
          cd frontend
          AUDIT_OUTPUT=$(npm audit --audit-level=high 2>&1 || true)
          echo "$AUDIT_OUTPUT"
          if echo "$AUDIT_OUTPUT" | grep -q "found 0 vulnerabilities"; then
            echo "✅ No high or critical vulnerabilities found"
          else
            echo "⚠️ High or critical vulnerabilities detected"
            echo "$AUDIT_OUTPUT"
          fi

      - name: Upload npm audit report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: npm-audit-report
          path: frontend/npm-audit-report.json

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      matrix:
        language: [ 'python', 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [python-security, npm-security]
    if: always()
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🔐 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Python Security Scan: ${{ needs.python-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "✅ NPM Security Scan: ${{ needs.npm-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed reports in the artifacts section." >> $GITHUB_STEP_SUMMARY
